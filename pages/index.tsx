import Head from 'next/head'
import { GetServerSideProps } from "next";
import { useEffect, useState } from "react";
import deluge, { login, updateUi } from "../utils/deluge";

// TODO refactor this to contain data from update_ui
interface torrent {
    name: string;
    save_path: string;
    hash: string;
    comment: string;
}

// Props that should come from getServerSideProps
// TODO get update_ui data once in getServerSideProps to start
interface IServerSideProps {
}

export default function Home( props: IServerSideProps ) {

    const [ torrents, setTorrents ] = useState([]);

    useEffect(() => {
        const interval = setInterval(async () => {
            const data = (await updateUi()).data.result.torrents
            setTorrents(data);
        }, 10000);

        return () => clearInterval(interval);
    }, [])
    const handleButtonClick = async () => {
        await deluge( 'webapi.get_torrents', [] );
        // axios.post('/api/deluge', {
        //   method: 'webapi.get_torrents',
        //   params: [],
        //   id: 1
        // }, {withCredentials: true });
    }

    return (
        <div className={"bg-gray-200 h-screen"}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={"flex flex-col"}>
                <h1 className={"self-center text-3xl font-mono"}>
                    Dashboard
                </h1>


                <button onClick={handleButtonClick}
                        className={"bg-blue-700 text-white rounded-xl p-2 m-3 shadow w-fit"}>
                    Click me for data!
                </button>

                <div className={"border border-black rounded p-2 m-3"}>
                    Torrent Data
                  {Object.values(torrents).map((tor: any) => <div key={tor.name}><pre>{JSON.stringify(tor)}</pre></div>)}
                </div>

            </main>
        </div>
    )
}

export const getServerSideProps: GetServerSideProps<IServerSideProps> = async ( ctx ) => {

    const cookie = await login();
    ctx.res.setHeader( 'set-cookie', cookie as string[] )


    return {
        props: {
        }
    }
}